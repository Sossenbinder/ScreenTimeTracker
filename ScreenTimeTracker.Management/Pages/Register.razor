@page "/register"
@using ScreenTimeTracker.Management.Models
@using System.Text
@using System.Text.Json
@using ScreenTimeTracker.Common.DataTypes
@using ScreenTimeTracker.Common.Utils
@using ScreenTimeTracker.Management.Extensions

@inject IHttpClientFactory HttpClientFactory;

<h1>Register</h1>

<EditForm style="display: flex; flex-direction: column; width: 300px"
		  Model="@_registerModel"
		  OnValidSubmit="@HandleValidSubmit">
	<InputText id="name"
			   style="display: flex"
			   placeholder="Name"
			   @bind-Value="_registerModel.Name" />
	<InputText id="password"
			   style="display: flex"
			   placeholder="Password"
			   type="password"
			   @bind-Value="_registerModel.Password" />
	<InputText id="confirmPassword"
			   style="display: flex"
			   placeholder="Repeat password"
			   type="password"
			   @bind-Value="_registerModel.ConfirmPassword" />

	<button type="submit">Submit</button>
</EditForm>

@code
{
	[CascadingParameter]
	AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

	private readonly RegisterModel _registerModel = new RegisterModel();

	private HttpClient _httpClient;

	protected override void OnInitialized()
	{
		_httpClient = HttpClientFactory.GetDefaultClient();

		base.OnInitialized();
	}

	private async Task HandleValidSubmit()
	{
		using var requestMessage = new HttpRequestMessage(HttpMethod.Post, FunctionMap.Get(Function.Register));

		var registerModelJson = JsonSerializer.Serialize(_registerModel);
		var httpContent = new StringContent(registerModelJson, Encoding.UTF8, "application/json");
		requestMessage.Content = httpContent;

		var response = await _httpClient.SendAsync(requestMessage);

		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Register successful");
		}
		else
		{
			Console.WriteLine("Register not successful");
		}
	}
}