@page "/login"
@using ScreenTimeTracker.Management.Models
@using System.Text
@using ScreenTimeTracker.Common.DataTypes
@using ScreenTimeTracker.Management.Services.Interface
@using JsonSerializer = System.Text.Json.JsonSerializer
@using ScreenTimeTracker.Common.DataTypes.Results;
@using ScreenTimeTracker.Common.Utils
@using ScreenTimeTracker.Management.Extensions

@inject IHttpClientFactory HttpClientFactory;
@inject IAuthService AuthService;

<h1>Login</h1>

<EditForm style="display: flex; flex-direction: column; width: 300px"
		  Model="@_loginModel"
		  OnValidSubmit="@HandleValidSubmit">
	<InputText id="name"
			   style="display: flex"
			   @bind-Value="_loginModel.Name"
			   placeholder="Name" />
	<InputText id="password"
			   style="display: flex"
			   type="password"
			   @bind-Value="_loginModel.Password"
			   placeholder="Password" />
	<button type="submit">Submit</button>
</EditForm>

@code
{
	[CascadingParameter]
	AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

	private readonly LoginModel _loginModel = new LoginModel();

	private HttpClient _httpClient;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		_httpClient = HttpClientFactory.GetDefaultClient();
	}

	private async Task HandleValidSubmit()
	{
		using var requestMessage = new HttpRequestMessage(HttpMethod.Post, FunctionMap.Get(Function.Login));

		var registerModelJson = JsonSerializer.Serialize(_loginModel);
		var httpContent = new StringContent(registerModelJson, Encoding.UTF8, "application/json");
		requestMessage.Content = httpContent;

		requestMessage.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

		var response = await _httpClient.SendAsync(requestMessage);

		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Login successful");
			var responseString = await response.Content.ReadAsStringAsync();
			var loginResponse = JsonSerializer.Deserialize<LoginResult>(responseString);
			AuthService.JwtToken = loginResponse.Token!;
		}
		else
		{
			Console.WriteLine("Login not successful");
		}
	}
}